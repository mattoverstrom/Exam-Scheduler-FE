{"version":3,"sources":["ExamList.jsx","Calendar.jsx","SemesterSelecter.jsx","FilterSelectionItem.jsx","FilterList.jsx","ExamFilter.jsx","CourseSelecter.jsx","ExamDetailsForm.jsx","ExamAddDialog.jsx","ExamPopover.jsx","ExamScheduler.jsx","react-auth0-spa.js","NavBar.js","Auth0Loader.js","Profile.js","PrivateRoute.js","App.js","serviceWorker.js","utils/history.js","index.js"],"names":["ExamList","props","exams","map","exam","levelColor","levelColors","find","level","className","key","examId","onClick","event","handleExamPopover","currentTarget","color","style","moment","examStart","format","backgroundColor","examEnd","sectionNickname","examName","assignedInstructor","examBuilding","examRoom","unit","subject","course","section","examSoftware","Calendar","calendarRef","React","createRef","handleViewObjectOnDatesRender","info","console","log","view","currentStart","formatFullCalendarEvents","bind","title","start","end","borderColor","extendedProps","examObj","defaultView","height","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","listViewPlugin","weekends","ref","this","events","datesRender","eventClick","eventClickInfo","jsEvent","Component","options","SemesterSelecter","anchorRef","handleClick","state","selectedIndex","handleMenuItemClick","option","updateAppsSemester","setState","selectedSemester","open","handleToggle","handleClose","current","contains","target","IconButton","size","fontSize","Popper","anchorEl","role","undefined","transition","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","Object","keys","index","MenuItem","selected","FilterSelectionItem","colors","selectedFilters","selectedItems","filterObjectKeys","filterObject","i","currentColor","forEach","push","cancelFilter","filterItem","length","FilterList","handleChange","name","update","filterGroup","checked","FormControl","component","FormLabel","filterLabel","FormGroup","checkboxes","FormControlLabel","control","Checkbox","onChange","value","label","ExamFilter","handleClickOpen","handleCancel","previousFilterState","filters","updateFilter","field","resetFilter","createFiltersState","filterJson","getSemestersFilters","semesterCode","req","XMLHttpRequest","send","onload","json","JSON","parse","responseText","filterState","tempFilterGroupObj","applyFilter","filterGroups","filterArr","filter","filterName","semester","prevProps","Dialog","onClose","fullWidth","maxWidth","aria-labelledby","DialogTitle","DialogContent","courseTitle","DialogActions","Button","CourseSelecter","coursesJson","_id","Select","native","courseId","mapCoursesMenuItems","courses","software","supportPeople","ExamDetailsForm","history","handleInputChange","handleCheckboxChange","handleCheckApproved","approved","handleExamStartChange","date","handleExamEndChange","submitForm","preventDefault","a","async","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","stringify","response","text","postData","examSemester","toISOString","supportPerson","emailFaculty","facultyConfirmed","then","addExamToGlobalState","catch","err","error","Date","onSubmit","Grid","container","alignItems","spacing","item","xs","md","InputLabel","htmlFor","TextField","InputProps","readOnly","variant","utils","DateFnsUtils","margin","KeyboardButtonProps","minWidth","labelId","Link","to","type","ExamAddDialog","popoverExamObj","building","room","popoverExamLevelColor","examDate","examStartTime","examEndTime","Popover","examPopoverOpen","handleExamPopoverClose","anchorOrigin","vertical","horizontal","Card","CardContent","alignContent","justify","Typography","ExamScheduler","calendarComponentRef","handleExamPopoverOpen","examDetailsFormOpen","examFilter","handleExamDetailsFormClose","currentExams","ExamPopover","DEFAULT_REDIRECT_CALLBACK","window","replaceState","document","location","pathname","Auth0Context","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","Auth0Loader","children","loading","Profile","user","src","picture","alt","email","PrivateRoute","path","render","appState","targetUrl","App","getSemestersExams","semesterExams","getSemestersCourses","filteredExams","filterKeys","every","includes","filterObjectCopy","handleExamDetailsFormOpen","exact","Boolean","hostname","match","createBrowserHistory","ReactDOM","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","createAuth0Client","auth0FromHook","search","handleRedirectCallback","getUser","initAuth0","Provider","loginWithPopup","params","getIdTokenClaims","getTokenSilently","getTokenWithPopup","p","returnTo","domain","config","client_id","clientId","redirect_uri","href","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83794d30.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\n\nfunction ExamList(props){\n  let examItems = props.exams.map((exam) => {\n    let levelColor = props.levelColors.find(levelColor => levelColor.level == exam.level);\n\n\n\n    return(\n      <div className=\"higlightRow\">\n      <div className=\"examListItem\" key={exam.examId} onClick={(event) => props.handleExamPopover(event.currentTarget, exam, levelColor.color)} style={{\"cursor\": \"pointer\"}}>\n      <div className=\"examListDate\">{moment(exam.examStart).format(\"MMM D\")}</div>\n      <div className=\"levelColorDot\" style={{backgroundColor: (levelColor ? levelColor.color : \"grey\")}}></div>&nbsp;\n      <div className=\"examListTime\">{moment(exam.examStart).format(\"h:mm A\")} - {moment(exam.examEnd).format(\"h:mm A\")}</div>\n      <p className=\"examListDescription\">\n      <span> {exam.sectionNickname} {exam.examName}</span>&nbsp; \n\n      <span> ({exam.level}) </span>&nbsp; \n      <span> {exam.assignedInstructor} </span>&nbsp; \n      <span> [{exam.examBuilding}-{exam.examRoom}] </span>&nbsp; \n      <span> {exam.unit}:{exam.subject}:{exam.course}:{exam.section} </span>&nbsp;\n      <span> {exam.examSoftware} </span>&nbsp;\n      </p>\n      </div>\n      </div>\n      )\n    }\n    );\n    \n    \n    return (\n      examItems\n      )\n    }\n    \n    export default ExamList;","import React from 'react';\n\n//For FullCalendar\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listViewPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\n\n\n\n\n\n    //component for rendering caldendar view\n    class Calendar extends React.Component{\n        constructor (props) {\n          super(props);\n          this.formatFullCalendarEvents = this.formatFullCalendarEvents.bind(this);\n        }\n\n        calendarRef = React.createRef()\n        \n        formatFullCalendarEvents(exams) {\n          let events = exams.map((exam) => {\n            let levelColor = this.props.levelColors.find(levelColor => levelColor.level == exam.level);\n            //console.log(exam);\n            return {\n              title: `${exam.sectionNickname} ${exam.examName} - ${exam.assignedInstructor}`,\n              start: exam.examStart,\n              end: exam.examEnd,\n              backgroundColor: (levelColor ? levelColor.color : \"grey\"),\n              borderColor: (levelColor ? levelColor.color : \"grey\"),\n              extendedProps: {examObj: exam}\n            }\n          })\n          \n          return events;\n        };\n\n        handleViewObjectOnDatesRender = (info) => {\n          //console.log(this.calendarRef.current.calendar.view);\n          \n          //bubble up currentStart to app state, and focus examList based on app state\n          console.log(`currentStart of calendar = ${info.view.currentStart}`);\n        }\n        \n        render(){\n\n          return (\n            <FullCalendar \n            defaultView=\"timeGridWeek\" \n            height={664}\n            header={{\n              left: 'timeGridDay timeGridWeek, dayGridMonth',\n              center: 'title',\n              right: 'prev, next, today' \n          }}\n            plugins={[ dayGridPlugin, timeGridPlugin, listViewPlugin ]}\n            weekends={false} \n            ref={this.calendarRef}\n            events = {this.formatFullCalendarEvents(this.props.exams)}\n            datesRender={this.handleViewObjectOnDatesRender}\n            eventClick={(eventClickInfo) =>  {\n              console.log(eventClickInfo.jsEvent)  \n              this.props.handleExamPopover(null, eventClickInfo.event.extendedProps.examObj, eventClickInfo.event.backgroundColor)\n            }}\n            />\n            )\n            \n          }\n          \n        }\n        \nexport default Calendar;\n\nlet testExamObj = {\ncourseId: \"5e7678f440b97600780cf6d9\",\nexamName: \"Exam 1\",\nexamStart: \"2020-04-22T16:30:00.000Z\",\nexamEnd: \"2020-04-22T18:00:00.000Z\",\nexamSemester: \"9909\",\nexamId: \"5e853c1388374a02cb51212c\",\nuniqueId: 856143841,\nsemester: \"9909\",\nunit: \"99\",\nsubject: \"999\",\ncourse: \"990\",\nsection: \"99\",\nindex: \"10000\",\ncourseTitle: \"BRAIN SCI FNDTS I\",\nassignedInstructor: \"Smartypants, Jone\",\nday: \"T\",\ncourseStartTime: \"08:00\",\ncourseEndTime: \"10:50\",\nbuilding: \"ABC\",\nroom: \"100\",\nprogram: \"Doctoral\",\nlevel: \"1st Year\",\nexamsoft: \"true\",\nfinal: \"true\",\nenrollment: 87,\nsectionNickname: \"BRAIN99\"\n}","import React from 'react';\n\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nimport Grid from '@material-ui/core/Grid';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst options = {\n  'Fall 1999': '9909',\n  'Spring 2020': '2001',\n  'Summer 2020': '2007'\n};\n\nexport default class SemesterSelecter extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedSemester: 'Fall 1999'\n    }\n    \n  };\nanchorRef = React.createRef(null);\n\n  handleClick = () => {\n    console.info(`You clicked ${options[this.state.selectedIndex]}`);\n  };\n\n  handleMenuItemClick = (event, option) => {\n    this.props.updateAppsSemester(options[option]);\n    console.log(options[option]);\n    this.setState({\n      selectedSemester: option,\n      open: false\n    })\n  };\n\n  handleToggle = () => {\n   this.setState({\n     open: !this.state.open\n   })\n  };\n\n  handleClose = event => {\n    if (this.anchorRef.current && this.anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    this.setState({\n      open: false\n    })\n  };\n\n/*    componentDidMount(){\n    this.props.updateAppsSemester(options[this.state.selectedSemester]);\n  }  */\n\n  \n\n  render(){\n    return (\n          <div className=\"semesterSelecter\" style={{color: \"white\", backgroundColor: \"black\"}} ref={this.anchorRef}>\n          {this.state.selectedSemester}\n          <div/>\n          <IconButton size=\"small\" color=\"inherit\" onClick={this.handleToggle}>\n          <ArrowDropDownIcon fontSize=\"small\"/>\n          </IconButton>\n          \n\n\n          <Popper open={this.state.open} anchorEl={this.anchorRef.current} role={undefined} transition >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                }}\n              >\n                <Paper>\n                  <ClickAwayListener onClickAway={this.handleClose}>\n                    <MenuList id=\"split-button-menu\">\n                      {Object.keys(options).map((option, index) => (\n                        <MenuItem\n                          key={option}\n                          selected={index === this.selectedIndex}\n                          onClick={event => this.handleMenuItemClick(event, option)}\n                        >\n                          {option}\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n          </div>\n    );\n\n    return(\n        <div className=\"filterSelectedItem\" style={{color: \"white\", backgroundColor: \"black\"}}>\n          Fall 1999\n          <div/>\n          <IconButton size=\"small\" color=\"inherit\">\n          <ArrowDropDownIcon fontSize=\"small\"/>\n          </IconButton>\n          </div>\n      )\n    }\n  }","import React from 'react';\n\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nimport SemesterSelecter from './SemesterSelecter';\n\nexport default class FilterSelectionItem extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {}\n  };\n\n  colors = [\"#a4dbb1\", \"#b3c7e6\", \"#a6dcde\", \"#bbafe3\", \"#e0abe0\", \"#fcffbd\", \"#ffe2b0\", \"#ffd8cc\", \"#b8b8b8\", \"#fc86fc\"];\n\n  selectedFilters = () => {\n    console.log('selectedFilters functions!');\n    let selectedItems = [];\n    let filterObjectKeys = Object.keys(this.props.filterObject);\n\n    /* for(let key in this.props.filterObject){ */\n    for(let i = 0; i < filterObjectKeys.length; i++){\n      let currentColor = this.colors[i];\n      let key = filterObjectKeys[i];\n\n      if(key === 'level'){\n        this.props.filterObject[key].forEach(level => {\n          let levelColor = this.props.levelColors.find((levelColor) => levelColor.level === level);\n          selectedItems.push(\n            <div className=\"filterSelectedItem\" style={{backgroundColor: levelColor.color}}>\n              {level} \n              <div/>\n              <IconButton size=\"small\" color=\"inherit\" onClick={() => this.props.cancelFilter('level', level)}>\n              <CancelIcon fontSize=\"small\" />\n              </IconButton>\n            </div>\n          )\n          })\n        \n\n       \n      } else /* if(key === 'assignedInstructor') */{\n        this.props.filterObject[key].forEach(filterItem => {\n          selectedItems.push(\n            <div className=\"filterSelectedItem\" style={{backgroundColor: currentColor}}>\n              {filterItem}\n              <div/>\n              <IconButton \n              size=\"small\" \n              color=\"inherit\" \n              onClick={() => this.props.cancelFilter(key, filterItem)}\n              >\n              <CancelIcon fontSize=\"small\" />\n              </IconButton>\n            </div>\n          )\n          })\n      }\n    }\n    console.log(selectedItems);\n    return selectedItems;\n  }\n\n\n  render(){\n    console.log(`FilterSeletionItem props.filterObject...`);\n    console.log(this.props.filterObject);\n    console.log(this.props.levelColors);\n\n\n    return(\n      <div className=\"filterSelectionsContainer\">\n        <SemesterSelecter updateAppsSemester={this.props.updateAppsSemester} />\n\n        {this.selectedFilters()}\n      {/* <div className=\"filterSelectedItem\" style={{backgroundColor: this.props.levelColors[0].color}}>1st year</div>\n      <div className=\"filterSelectedItem\" style={{backgroundColor: this.props.levelColors[1].color}}>2nd year</div> */}\n      </div>\n      )\n    }\n    \n    \n    \n  }","import React from 'react';\n\n\n\n//material-ui imports for dialog box\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nlet level = [\"1st year\", \"2nd year\", \"3rd year\"];\n\nexport default function FilterList(props){\n  \n  let handleChange = name => event => {\n    props.update(props.filterGroup, name, event.target.checked);\n  };\n\n  function filterItemCheckboxLabels(){\n    let filterItemCheckboxLabels = Object.keys(props.checkboxes).map((filterItem) => {\n      return (<FormControlLabel\n      control={<Checkbox checked={props.checkboxes[filterItem]} onChange={handleChange(filterItem)} value={filterItem} />}\n      label={filterItem}\n      />)\n    })\n\n    return filterItemCheckboxLabels;\n  }\n  \n  \n    return(\n      <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{props.filterLabel}</FormLabel>\n      <FormGroup>\n        {filterItemCheckboxLabels()}\n      </FormGroup>\n      </FormControl>\n      )\n    \n    \n  }","import React from 'react';\n\n//components\n\nimport FilterSelectionItem from './FilterSelectionItem';\nimport FilterList from './FilterList';\n\n//material-ui imports\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n//material-ui imports for dialog box\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nexport default class ExamFilter extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"open\": false,\n      \"filters\": {},\n      \"previousFilterState\": {},\n      \"filterObject\":{},\n      \"filterJson\": {}\n    }\n  }\n  \n  handleClickOpen = () => {\n    this.setState({\n      \"open\": true\n    })\n  };\n  \n  handleCancel = () => {\n    this.setState({\n      \"open\": false,\n      \"filters\": this.state.previousFilterState.filters\n    })\n  };\n  \n  //update filters that are checked in children components\n  updateFilter = (filterGroup, field, value) => {\n    console.log(`From examFilter updateFilter function ${filterGroup}, ${field}, ${value}`);\n    this.setState(\n      {\n        ...this.state,\n        filters: {\n          ...this.state.filters, \n          [filterGroup]: {\n            ...this.state.filters[filterGroup], \n            [field]: value\n          }\n        }\n      }\n    );\n  }\n  \n    resetFilter = () => {\n      this.setState({\n        filters: this.createFiltersState(this.state.filterJson)\n      }\n        )\n    }\n\n      //component did mount grabs fitlers from props, and builds state.filters\n      componentDidMount(){\n        this.getSemestersFilters(this.props.semester)\n      }\n\n      componentDidUpdate(prevProps){\n        if(prevProps.semester !== this.props.semester){\n          this.getSemestersFilters(this.props.semester)\n        }\n      };\n      \n      getSemestersFilters = (semesterCode) =>{\n        const req = new XMLHttpRequest();\n        req.open(\"GET\",`https://exam-scheduler.glitch.me/api/filters?semester=${semesterCode}`,true);\n        req.send();\n        req.onload = () => {\n          const json = JSON.parse(req.responseText);\n          console.log(json);\n          this.setState({\n            filters: this.createFiltersState(json),\n            filterObject: {},\n            previousFilterState: {\n              filters: this.createFiltersState(json)\n            },\n            filterJson: json\n          })\n        };\n      }\n  \n\n      createFiltersState = (filterJson) => {\n        let filterState = {};\n        for(let filterGroup in filterJson){\n          let tempFilterGroupObj = {};\n          for(let filterField of filterJson[filterGroup]){\n            tempFilterGroupObj[filterField] = false;\n          }\n          filterState[filterGroup] = tempFilterGroupObj;\n        }\n        console.log(filterState);\n        return(filterState);\n      }\n      \n      applyFilter = () => {\n        //filtersKeys dynamically builds an array of filterGroups from this.state.filters\n        let filtersKeys = Object.keys(this.state.filters);\n\n        //filter object collects the names of the filter selections by which to filter the exams\n        let filterObject = {}\n        \n        for (let filterGroups of filtersKeys){\n          //filter state based on filter that are set to true\n          let filterArr = [];\n          for (let key in this.state.filters[filterGroups]){\n            if(this.state.filters[filterGroups][key]) { filterArr.push(key) };\n          }\n          filterObject[filterGroups] = filterArr;\n        }\n        \n        //call filter function in App.js to apply filter to this semesters exam set\n        this.props.filter(filterObject);\n\n          this.setState({\n            open: false,\n            previousFilterState:{\n              filters: this.state.filters\n            },\n            filterObject: filterObject\n          });\n        }\n\n\n        //this is baiscally a copy of the applyFilter function with the addition of some params\n        //that can be used to remove one filterName from the filter object and pass the new\n        //filter object up to the filter function in app.js.\n        //This function was added for the cancle buttons on filterSelectionItems\n        cancelFilter = (filterGroup, filterName) => {\n          //filtersKeys dynamically builds an array of filterGroups from this.state.filters\n          let filtersKeys = Object.keys(this.state.filters);\n          \n          //filter object collects the names of the filter selections by which to filter the exams\n          let filterObject = {}\n          \n          for (let filterGroups of filtersKeys){\n            //filter state based on filter that are set to true\n            let filterArr = [];\n            for (let key in this.state.filters[filterGroups]){\n              if(this.state.filters[filterGroups][key]) { filterArr.push(key) };\n            }\n            filterObject[filterGroups] = filterArr;\n          }\n\n          //removes filterName from filterGroup's filterObject array\n          filterObject[filterGroup] = filterObject[filterGroup].filter(name => name !== filterName);\n          \n          //call filter function in App.js to apply filterObject to this semesters exam set\n          this.props.filter(filterObject);\n\n            //added updateFilter to cancleFilter in order to update filter state\n            //the applyFilter function that the cancleFilter function is based on only manipulates\n            //the filterObject, but the filter state also needs to be updated for other children \n            //components to display the correct data (e.g. LevelFilterExamList)\n            this.updateFilter(filterGroup, filterName, false);\n            \n            this.setState({\n              open: false,\n              previousFilterState:{\n                filters: this.state.filters\n              },\n              filterObject: filterObject\n            });\n          }\n\n        //dynamically build filterLists based on state.filters\n\n\n        \n        render(){\n          console.log(`ExamFilter state:`);\n          console.log(this.state);\n          return(\n            <div id=\"filterContainer\">\n            \n            <FilterSelectionItem \n              filterObject={this.state.filterObject} \n              levelColors={this.props.levelColors}\n              updateAppsSemester={this.props.updateAppsSemester}\n              cancelFilter={(filterGroup, field) => {\n                this.cancelFilter(filterGroup, field)\n                }\n              }\n            />\n            \n            <IconButton id=\"filterButton\">\n            <FilterListIcon style={{fontSize: 30}} onClick={this.handleClickOpen}/>\n            </IconButton>\n            \n            <Dialog open={this.state.open} onClose={this.handleCancel} fullWidth={false} maxWidth=\"xl\" aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Filters</DialogTitle>\n            <DialogContent>\n            \n            <FilterList \n            update={(filterGroup, field, value) => this.updateFilter(filterGroup, field, value)}\n            checkboxes={this.state.filters.level}\n            filterGroup=\"level\"\n            filterLabel=\"Level\"\n            />\n\n            <FilterList \n            update={(filterGroup, field, value) => this.updateFilter(filterGroup, field, value)}\n            checkboxes={this.state.filters.assignedInstructor}\n            filterGroup=\"assignedInstructor\"\n            filterLabel=\"Instructor\"\n            />\n\n            <FilterList \n            update={(filterGroup, field, value) => this.updateFilter(filterGroup, field, value)}\n            checkboxes={this.state.filters.courseTitle}\n            filterGroup=\"courseTitle\"\n            filterLabel=\"Course\"\n            />  \n\n            <FilterList \n            update={(filterGroup, field, value) => this.updateFilter(filterGroup, field, value)}\n            checkboxes={this.state.filters.examSoftware}\n            filterGroup=\"examSoftware\"\n            filterLabel=\"Software\"\n            />  \n            \n            </DialogContent>\n            \n            <DialogActions>\n            <Button onClick={this.handleCancel} color=\"primary\">\n            Cancel\n            </Button>\n            <Button onClick={this.resetFilter} color=\"primary\">\n            Reset\n            </Button>\n            <Button onClick={() => this.applyFilter()} color=\"primary\">\n            Apply\n            </Button>\n            </DialogActions>\n            </Dialog>\n            \n            </div>\n            )\n          }\n        }\n        \n        ","import React from 'react';\n\n//material-ui imports\nimport IconButton from '@material-ui/core/IconButton';\n\n\n//material-ui imports for dialog box\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport { MenuItem } from '@material-ui/core';\n\n\nexport default class CourseSelecter extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: \"\"\n    }\n  }\n\n  handleChange(value) {\n    this.setState({ selected: value });\n  }\n\n  mapCoursesMenuItems(coursesJson){\n    return coursesJson.map(course => {\n      return(\n        <MenuItem key={course._id} value={course._id}>\n          {course.unit}:{course.subject}:{course.course}:{course.section} {course.courseTitle} <br />\n          &nbsp; &nbsp; Instr: {course.assignedInstructor} \n        </MenuItem>\n      )\n    })\n  }\n  \n  render(){\n    return(\n\n      <Select\n      native={false}\n      name=\"courseId\" \n      id=\"courseId\"\n      value={this.props.courseId}\n      onChange={this.props.onChange}\n/*       input={<Input id=\"courseId\" />}\n */      fullWidth\n      >\n        {this.mapCoursesMenuItems(this.props.courses)}\n\n      </Select>\n  \n    )\n  } \n}","import React from 'react';\nimport moment from 'moment';\nimport { Link, Redirect } from 'react-router-dom';\n\n//material-ui imports\nimport IconButton from '@material-ui/core/IconButton';\n\n\n//material-ui imports for dialog box\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from  '@material-ui/core/Grid';\nimport {\n  Checkbox,\n  FormControlLabel,\n  Input,\n  MenuItem,\n  Container,\n  Paper\n} from '@material-ui/core/';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDateTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport DateFnsUtils from '@date-io/moment';\n\n//custom components\nimport CourseSelecter from './CourseSelecter.jsx'\n\nconst software = [\n  {\n    value: \"ES\",\n    label: \"Examsoft\"\n  },\n  {\n    value: \"CNV\",\n    label: \"Canvas\"\n  },\n  {\n    value: \"PT\",\n    label: \"Canvas with ProctorTrack\"\n  },\n  {\n    value: \"ATI\",\n    label: \"ATI\"\n  }\n]\n\nconst supportPeople = [\n  {\n    value: \"Grittwald Grittington\",\n    label: \"Gritty\"\n  },\n  {\n    value: \"Tom Porvaznik\",\n    label: \"Amish Tom\"\n  },\n  {\n    value: \"Jason Love\",\n    label: \"J. Lo\"\n  }\n]\n\n\n\n\nexport default class ExamDetailsForm extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      courses: [],\n      courseId: \"\",\n      approved: false,\n      examName: \"\",\n      approved: false,\n      examStart: new Date(),\n      examEnd: new Date(),\n      examBuilding: \"\",\n      examRoom: \"\",\n      examSoftware: \"\",\n      supportPerson:\"\",\n      emailFaculty: false,\n      facultyConfirmed: false\n    }\n  }\n  \n  //TODO...\n  handleClose = () => this.props.history.push('/');\n  ;\n\n  handleInputChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  handleCheckboxChange = (event) => {\n    this.setState({[event.target.name]: !this.state[event.target.name]})\n  }\n\n  handleCheckApproved = () => {\n    this.setState({approved: !this.state.approved})\n  }\n  \n  handleExamStartChange = (date) => {\n    this.setState({examStart: date})\n  }\n\n  handleExamEndChange = (date) => {\n    this.setState({examEnd: date})\n  }\n\n\n\n\n  //Fetch courses based on current semester\n  /* getSemestersCourses = (semesterCode) =>{\n    const req = new XMLHttpRequest();\n    req.open(\"GET\",`https://exam-scheduler.glitch.me/api/courses?semester=${semesterCode}`,true);\n    req.send();\n    req.onload = () => {\n      const json = JSON.parse(req.responseText);\n      console.log(json);\n      this.setState({\n        courses: json\n      });\n    };\n  }\n\n    \n  componentDidUpdate(prevProps, prevState){\n    if(prevProps.semester !== this.props.semester){\n      this.getSemestersCourses(this.props.semester);\n    } \n     \n  };*/\n\n  submitForm = (event) => {\n    event.preventDefault();  \n    postData(\"https://exam-scheduler.glitch.me/api/exams\", {\n      courseId: this.state.courseId,\n      examSemester: this.props.semester,\n      examName: this.state.examName,\n      approved: this.state.approved,\n      examStart: this.state.examStart.toISOString(),\n      examEnd: this.state.examEnd.toISOString(),\n      examBuilding: this.state.examBuilding,\n      examRoom: this.state.examRoom,\n      examSoftware: this.state.examSoftware,\n      supportPerson: this.state.supportPerson,\n      emailFaculty: this.state.emailFaculty,\n      facultyConfirmed: this.state.facultyConfirmed\n    })\n    .then((response) => {\n      this.props.addExamToGlobalState(JSON.parse(response));\n      console.log(response);\n    })\n    .catch(err => console.error(err))\n    this.handleClose();\n  }\n \n  \n  render(){\n    \n\n    return(\n      <Paper id=\"examDetailsFormPaper\">\n      {/* <Container maxWidth=\"sm\"> */}\n     \n      <form onSubmit={this.submitForm}>\n\n\n        \n        <Grid container alignItems=\"flex-start\" spacing={2}>\n          <Grid item xs={12} md={9}>\n            <InputLabel htmlFor=\"courseId\">Course</InputLabel>\n            <CourseSelecter courses={this.props.courses} onChange={this.handleInputChange} courseId={this.state.courseId} />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <TextField \n              name=\"examSemester\"\n              id=\"examSemester\"\n              label=\"Semester\"\n              value={this.props.semester}\n              onChange={this.handleInputChange}\n              InputProps={{\n                readOnly: true\n              }}\n            />\n          </Grid>\n          \n          \n\n          <Grid item xs={12} md={9}>\n            <TextField \n              name=\"examName\"\n              id=\"examName\" \n              label=\"Exam Name\" \n              value={this.state.examName}    \n\n              onChange={this.handleInputChange}\n              variant=\"filled\" \n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              value={this.state.approved}\n              control={<Checkbox\n                name=\"approved\"\n                id=\"approved\"\n                checked={this.state.approved}\n                onChange={this.handleCheckboxChange}\n              />}\n              label=\"Approved\"\n            />\n          </Grid>\n\n\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            \n    {/*         Create a 3 piece date time picker: 1 date picker for date, 1 time picker for start time, and 1 time picker for end time picker\n            Requires higher level functions to massage data before returning to server. */}\n            {/*<Grid item xs={12} lg={6}>\n               <KeyboardDateTimePicker\n              margin=\"normal\"</Grid>\n              id=\"examDate\"\n              label=\"Exam Date\"\n              format=\"MM/DD/YYYY\"\n              value={this.state.selectedDate}\n              onChange={this.handleDateChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />  \n            </Grid>*/}\n            \n\n            <Grid item xs={12} md={5}>\n            <KeyboardDateTimePicker\n              margin=\"normal\"\n              name=\"examStart\"\n              id=\"examStart\"\n              label=\"Start Time\"\n              value={this.state.examStart} \n              //inputValue={this.state.examStart}\n              onChange={this.handleExamStartChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change time',\n              }}\n              />\n              \n            </Grid> \n            \n\n            <Grid item xs={12} md={5}>\n              <KeyboardDateTimePicker\n                margin=\"normal\"\n                name=\"examEnd\"\n                id=\"examEnd\"\n                label=\"End Time\"\n                value={this.state.examEnd}\n                //inputValue={this.state.examEnd}\n                onChange={this.handleExamEndChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            </Grid>\n\n          </MuiPickersUtilsProvider>\n\n\n\n          <Grid item xs={12} md={5}>\n            <TextField \n              name=\"examBuilding\"\n              id=\"examBuilding\" \n              label=\"Building\" \n              value={this.state.examBuilding}\n              onChange={this.handleInputChange}\n              variant=\"filled\" \n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12} md={5}>\n            <TextField \n              name=\"examRoom\"\n              id=\"examRoom\" \n              label=\"Room\" \n              value={this.state.examRoom}\n              onChange={this.handleInputChange}\n              variant=\"filled\" \n              fullWidth\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <FormControl style={{minWidth: 200}}>\n            <InputLabel id=\"examSoftwareLabel\">Software</InputLabel>\n            <Select\n              name=\"examSoftware\"\n              id=\"examSoftware\" \n              labelId=\"examSoftwareLabel\"\n              value={this.state.examSoftware}\n              onChange={this.handleInputChange}\n              \n              >\n                {software.map((software) => {\n                return(\n                  <MenuItem key={software.value} value={software.value}>\n                    {software.label}\n                  </MenuItem>\n                )\n              })}\n            \n            </Select>\n            </FormControl>\n          </Grid>\n\n            <Grid item xs={12} md={4}>\n              <FormControl style={{minWidth: 200}}>\n              <InputLabel id=\"supportPersonLabel\">Support Person</InputLabel>\n              <Select\n                name=\"supportPerson\"\n                id=\"supportPerson\" \n                labelId=\"supportPersonLabel\"\n                value={this.state.supportPerson}\n                onChange={this.handleInputChange}\n                native={false}\n                >\n                  {supportPeople.map((supportPerson) => {\n                  return(\n                    <MenuItem key={supportPerson.value} value={supportPerson.value}>\n                      {supportPerson.label}\n                    </MenuItem>\n                  )\n                })}\n              \n              </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={6} md={4}>\n              <FormControlLabel\n                value={this.state.emailFaculty}\n                control={<Checkbox\n                  name=\"emailFaculty\"\n                  id=\"emailFaculty\"\n                  checked={this.state.emailFaculty}\n                  onChange={this.handleCheckboxChange}\n                />}\n                label=\"Email Faculty\"\n              />\n            </Grid>\n\n          <Grid item xs={6} md={4}>\n            <FormControlLabel\n              value={this.state.facultyConfirmed}\n              control={<Checkbox\n                name=\"facultyConfirmed\"\n                id=\"facultyConfirmed\"\n                checked={this.state.facultyConfirmed}\n                onChange={this.handleCheckboxChange}\n              />}\n              label=\"Faculty Confirmed\"\n            />\n          </Grid>\n\n\n        </Grid>\n\n                \n        <Button component={Link} to=\"/\" color=\"primary\">\n        Cancel\n        </Button>\n\n        <Button type=\"submit\" color=\"primary\">\n        Add/Update\n        </Button>\n\n        </form>\n        </Paper>\n      \n\n    \n    )\n  }\n}\n\nasync function postData(url = '', data) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'manual', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return await response.text(); // parses JSON response into native JavaScript objects\n}","import React from 'react';\n\n//material-ui imports for dialog box\nimport {\n  Dialog\n} from '@material-ui/core/';\n\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n//custom components\nimport ExamDetailsForm from './ExamDetailsForm.jsx'\n\nexport default function ExamAddDialog (props) {\n  return(\n    <div>\n    <Dialog open={props.open} onClose={props.handleClose} /* fullScreen */ fullWidth={false} maxWidth=\"lg\" aria-labelledby=\"exam-details-form\">\n    <DialogTitle id=\"exam-details-form-title\">Add Exam</DialogTitle>\n    <DialogContent>\n      <ExamDetailsForm semester={props.semester} handleClose={props.handleClose} courses={props.courses} addExamToGlobalState={props.addExamToGlobalState}/>\n    </DialogContent>\n    </Dialog> \n    </div>\n    )\n  }\n  ","import React from 'react';\nimport './App.css';\nimport moment from 'moment';\n\n//Import Material UI\nimport IconButton from '@material-ui/core/IconButton';\nimport { Popover, Card, CardHeader, CardActions, Typography, CardContent, Grid } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction ExamList(props){\n\n\n    let sectionNickname = props.popoverExamObj ? props.popoverExamObj.sectionNickname : \"sectionNickname\";\n    let examName = props.popoverExamObj ? props.popoverExamObj.examName : \"examName\";\n    let building = props.popoverExamObj ? props.popoverExamObj.building : \"building\";\n    let room = props.popoverExamObj ? props.popoverExamObj.room : \"room\";\n    let assignedInstructor = props.popoverExamObj ? props.popoverExamObj.assignedInstructor : \"assignedInstructor\";\n    let level = props.popoverExamObj ? props.popoverExamObj.level : \"level\";\n    let levelColor = props.popoverExamLevelColor ? props.popoverExamLevelColor : \"#000\"; \n    let examDate = props.popoverExamObj ? moment(props.popoverExamObj.examStart).format('MMM D') : moment().format('MMM D');\n    let examStartTime = props.popoverExamObj ? moment(props.popoverExamObj.examStart).format('h:mm a') : moment().format('h:mm a');\n    let examEndTime = props.popoverExamObj ? moment(props.popoverExamObj.examEnd).format('h:mm a') : moment().format('h:mm a');\n\n\n    return(<Popover\n        id=\"examPopover\"\n        open={props.examPopoverOpen}\n        anchorEl={props.anchorEl}\n        onClose={props.handleExamPopoverClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n\n\n      >\n        <Card         style={{maxWidth: 500}}>\n          <CardContent>\n          <Grid container spacing={2} alignContent=\"flex-start\">\n\n            <Grid item container xs={12} justify=\"flex-end\">\n                <IconButton><EditIcon/></IconButton>  \n                <IconButton><InfoIcon/></IconButton>\n                <IconButton><DeleteIcon/></IconButton>\n\n            </Grid>\n           \n            <Grid item xs={12} >\n              <Typography variant=\"h6\">{sectionNickname}  {examName}</Typography>\n            </Grid>\n\n            <Grid item xs={12} >\n              <Typography variant=\"subtitle1\">{examDate} {examStartTime} - {examEndTime}</Typography>\n            </Grid>\n\n            <Grid item xs={6} md={4}>\n              <Typography variant=\"overline\">Building</Typography>\n              <Typography variant=\"body1\">{building}</Typography>\n            </Grid>\n            <Grid item xs={6} md={4}>\n              <Typography variant=\"overline\">Room</Typography>\n              <Typography variant=\"body1\">{room}</Typography>\n            </Grid>\n            <Grid item xs={0} md={4} >\n              <Typography variant=\"body1\"></Typography>\n            </Grid>\n\n            <Grid item xs={12} md={4} container>\n              <Grid item xs={12}><Typography variant=\"overline\">Instructor</Typography></Grid>\n              <Grid item xs={12}><Typography variant=\"body1\">{assignedInstructor}</Typography></Grid>\n            </Grid>\n\n            <Grid item xs={12} md={4} container>\n                <Grid item xs={12}><Typography variant=\"overline\">Level</Typography></Grid>\n                <Grid item xs={12} container>\n                <Grid item xs={2}>\n                    <div className=\"levelColorDot\" \n                    style={{\n                      backgroundColor: (levelColor ? levelColor : \"grey\"),\n                      margin: \".25rem 0\"               \n                    }}></div>\n                  </Grid>\n\n                  <Grid item xs={10}><Typography variant=\"body1\">{level}</Typography></Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={4} >\n              <Typography variant=\"body1\"></Typography>\n            </Grid>\n\n          \n            \n              \n            </Grid>\n          </CardContent>\n          \n\n        </Card>\n        \n      </Popover>)\n   \n      }\n      \n      export default ExamList;","import React from 'react';\nimport './App.css';\nimport moment from 'moment'\nimport { Route, Link } from \"react-router-dom\";\n\n\n//For FullCalendar\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listViewPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\n\n//Import custom components\nimport ExamList from './ExamList.jsx'\nimport Calendar from './Calendar.jsx'\nimport ExamFilter from './ExamFilter.jsx'\nimport ExamDetailsForm from './ExamDetailsForm.jsx'\nimport ExamAddDialog from './ExamAddDialog.jsx';\nimport ExamPopover from './ExamPopover.jsx';\n\n//Import Material UI\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport IconButton from '@material-ui/core/IconButton';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { Popover, Card, CardHeader, CardActions, Typography, CardContent, Grid } from '@material-ui/core';\n\n\n\nexport default class ExamScheduler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      examPopoverOpen: false,\n      anchorEl: null,\n      popoverExamObj: null,\n      popoverExamLevelColor: null\n    }\n    this.props = {\n      examDetailsFormOpen: false\n    }\n  }\n\n  \n  calendarComponentRef = React.createRef();\n  \n \n  render(){\n    console.log(`This is what filters looks like in props`);\n    console.log(this.props.filters);\n    return (\n      <div className=\"App\">\n      \n      \n      <section id=\"tools\">\n      <ExamFilter \n      levelColors={this.props.levelColors} \n      filters={this.props.filters} //I don't see this in app props so it might be used anymore\n      semester={this.props.semester}\n      filter={(filterObject) => this.props.examFilter(filterObject)}\n      updateAppsSemester={(semesterCode) => this.props.updateAppsSemester(semesterCode)}\n      />\n\n      <IconButton id=\"conflictsButton\">\n        <WarningIcon style={{fontSize: 30}} onClick={this.handleClickOpen}/>\n      </IconButton>\n\n      <IconButton id=\"addExamButton\"component={Link} to=\"/examEdit\">\n        <AddBoxIcon style={{fontSize: 30}}  />\n      </IconButton>\n      <ExamAddDialog \n        open={this.props.examDetailsFormOpen} \n        handleClose={this.handleExamDetailsFormClose} \n        semester={this.props.semester}\n        courses={this.props.courses}\n        addExamToGlobalState={this.props.addExamToGlobalState}\n        />\n        \n      </section>\n      \n      <main>\n        {/* Test route */}\n        \n\n      <section id=\"calendarSection\">\n      {/* <h2>Calendar</h2> */}\n      <div id=\"calendar\">\n      <Calendar \n      exams={this.props.currentExams} \n      ref={this.calendarComponentRef}       \n      levelColors={this.props.levelColors}\n      handleExamPopover={this.handleExamPopoverOpen}\n      />\n      </div>\n      </section>\n      \n      <section id=\"examListSection\">\n      <h2>Exam List</h2>\n      <div id=\"examList\">\n      \n      <ExamList \n      exams={this.props.currentExams} \n      levelColors={this.props.levelColors}\n      handleExamPopover={this.handleExamPopoverOpen}\n      />\n      \n      </div>\n      </section>\n\n      <ExamPopover\n        examPopoverOpen={this.state.examPopoverOpen}\n        anchorEl={this.state.anchorEl}\n        popoverExamObj={this.state.popoverExamObj}\n        popoverExamLevelColor={this.state.popoverExamLevelColor}\n        handleExamPopoverClose={this.handleExamPopoverClose}\n      />\n      \n\n      </main>\n      </div>\n      );\n    };\n    \n    /* componentDidMount(){\n      this.updateAppsSemester(this.props.semester);\n      \n    } */\n\n    handleExamPopoverOpen = (anchorEl, exam, levelColor) => {\n\n      console.log(anchorEl);\n      \n      this.setState({\n        \"examPopoverOpen\": true,\n        \"anchorEl\": anchorEl,\n        \"popoverExamObj\": exam,\n        \"popoverExamLevelColor\": levelColor\n      });\n      /* console.log(levelColor);\n      alert(`Hi! The level color for this exam is: ${levelColor.color}`); */\n    }\n\n    handleExamPopoverClose = () => this.setState({examPopoverOpen: false, anchorEl: null});\n    \n    \n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  ","// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({...p, returnTo: \"https://tomporvaz.github.io/Exam-Scheduler-FE/\"})\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <button onClick={() => loginWithRedirect({})}>Log in</button>\n      )}\n\n      {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n    </div>\n  );\n};\n\nexport default NavBar;","import React from \"react\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nfunction Auth0Loader({ children }) {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return ( \n    <div>\n      { children }\n    </div>\n    \n  );\n}\n\nexport default Auth0Loader;","// src/components/Profile.js\n\nimport React, { Fragment } from \"react\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n \n  const fn = async () => {\n          await loginWithRedirect({\n            appState: {targetUrl: window.location.pathname}\n          });\n        };\n\n  return <Route path={path} render={props =>\n    isAuthenticated === true ? (<Component {...props} />) : ( fn() )\n}/>\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport './App.css';\nimport ExamScheduler from './ExamScheduler';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ExamDetailsForm from './ExamDetailsForm';\nimport NavBar from './NavBar';\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport Auth0Loader from './Auth0Loader';\nimport Profile from './Profile';\nimport PrivateRoute from './PrivateRoute';\n\n\n\n\n//levelColors should come from server\nlet levelColors = [\n  {\n    level: \"1st Year\",\n    color: \"#E40066\"\n  },\n  {\n    level: \"2nd Year\",\n    color: \"#345995\"\n  },\n  {\n    level: \"Frsh\",\n    color: \"#795548\"\n  },\n  {\n    level: \"Soph\",\n    color: \"#4285F4\"  \n  },\n  {\n    level: \"Jrs\",\n    color: \"#0B8043\"\n  },\n  {\n    level: \"Srs\",\n    color: \"#8F7000\"\n  },\n  {\n    level: \"L1\",\n    color: \"#8E24AA\"\n  },\n  {\n    level: \"L2\",\n    color: \"#D81B60\"\n  },\n  {\n    level: \"L3\",\n    color: \"#EF6C00\"\n  },\n  {\n    level: \"L4\",\n    color: \"#D50000\"\n  }\n]\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      semester: \"9909\",\n      semesterExams: [],\n      currentExams:[],\n      levelColors: levelColors,\n      /* instructors: instructors, */\n      filterObjectCopy: {},\n      /* examDetailsFormOpen: false,  */\n      courses: []\n    }\n\n  }\n\n\n\n\n \n  render(){\n/*     //from Auth0 for loading\n    const { loading } = useAuth0();\n    //from Auth0 for loading\n    if (loading) {\n      return <div>Loading...</div>;\n    } */\n\n\n    return (\n      <div>\n\n      <header>\n        <h1><Link to=\"/\">Exam Scheduler</Link></h1>\n        <NavBar></NavBar>\n        <Link to=\"/profile\">Profile</Link>\n      </header>\n\n      <Route path=\"/\" exact render={(props) => <Auth0Loader>\n          <ExamScheduler\n            {...props}\n            semester={this.state.semester}\n            semesterExams={this.state.semesterExams}\n            currentExams={this.state.currentExams}\n            levelColors={this.state.levelColors}\n            courses={this.state.courses}\n            //function props\n            examFilter={(filterObject) => this.examFilter(filterObject)}\n            updateAppsSemester={(semesterCode) => this.updateAppsSemester(semesterCode)}\n\n            />\n          </Auth0Loader>\n        }\n      />\n\n      <Route path=\"/examEdit\" render={(props) =>  <ExamDetailsForm \n            {...props} \n            semester={this.state.semester} \n            handleClose={this.handleClose} \n            courses={this.state.courses} \n            addExamToGlobalState={this.addExamToGlobalState}\n          />}\n        />\n\n      {/* <Route path=\"/profile\" component={Profile}/> */}\n      <PrivateRoute path=\"/profile\" component={Profile} />\n\n      </div>\n    )\n    };\n\n    getSemestersExams = (semesterCode) =>{\n      const req = new XMLHttpRequest();\n      req.open(\"GET\",`https://exam-scheduler.glitch.me/api/exams?semester=${semesterCode}`,true);\n      req.send();\n      req.onload = () => {\n        const json = JSON.parse(req.responseText);\n        console.log(json);\n        this.setState({\n          semesterExams: json,\n          currentExams: json\n        });\n        console.log(this.state.semesterExams);\n      };\n    }\n\n    //Fetch courses based on current semester\n  getSemestersCourses = (semesterCode) =>{\n    const req = new XMLHttpRequest();\n    req.open(\"GET\",`https://exam-scheduler.glitch.me/api/courses?semester=${semesterCode}`,true);\n    req.send();\n    req.onload = () => {\n      const json = JSON.parse(req.responseText);\n      console.log(json);\n      this.setState({\n        courses: json\n      });\n    };\n  }\n\n    /* getSemestersFilters = (semesterCode) =>{\n      const req = new XMLHttpRequest();\n      req.open(\"GET\",`https://exam-scheduler.glitch.me/api/filters?semester=${semesterCode}`,true);\n      req.send();\n      req.onload = () => {\n        const json = JSON.parse(req.responseText);\n        console.log(json);\n        this.setState({\n          filters: json\n        });\n      };\n    } */\n\n    updateAppsSemester = (semesterCode) => {\n      this.getSemestersExams(semesterCode);\n      this.getSemestersCourses(semesterCode);\n     /*  this.getSemestersFilters(semesterCode); */\n      this.setState({\n        semester: semesterCode\n      })\n    }\n\n    componentDidMount(){\n      this.updateAppsSemester(this.state.semester);\n    } \n\n    \n\n    /*examFilter function accepts an oject of fields, and the values by which to filter\n      e.g. - \n      {\n        level: [\"1st Year\"],\n        assignedInstructors: [\"Up, Harry\", \"Smartypants, Jone\"]\n      }\n    */\n    examFilter = (filterObject) => {\n      //create filteredExams to operate on and initialize with fresh copy of this semester data\n      let filteredExams = this.state.semesterExams\n      //alias the filter keys to get list of field names\n      const filterKeys = Object.keys(filterObject);\n      \n      /*\n      filter exams with Array.filter testing if each field (filterKey) in the exam includes  \n      at least one filter value.\n      */\n      filteredExams = filteredExams.filter(exam => {\n        return filterKeys.every(key => {\n          if (!filterObject[key].length) {return true};\n          return filterObject[key].includes(exam[key]);\n        })\n      })\n\n      this.setState({\n        \"currentExams\": filteredExams,\n        \"filterObjectCopy\": filterObject\n      })\n    };\n\n    //add exam to semesterExams and update UI while retaining filter\n    addExamToGlobalState = (examObj) => {\n      this.setState({\n        semesterExams: [...this.state.semesterExams, examObj]\n      })\n      //examFilter needs to be fired to update currentExams, as well as reapply filter\n      //filterObjectCopy is sloppy, and it probably should be the canonical source for all components\n      //TODO: delete filterObject from examFilter, and update all sources to use filterObjectCopy in App.js\n      this.examFilter(this.state.filterObjectCopy);\n    }\n\n    handleExamDetailsFormOpen = () => {\n      this.setState({\n        \"examDetailsFormOpen\": true\n      })\n    };\n    \n    handleExamDetailsFormClose = () => {\n      this.setState({\n        \"examDetailsFormOpen\": false\n      })\n    };\n\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//for Auth0\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n//for fullcalendar\nimport { Calendar } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listViewPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.href}\n    returnTo={\"https://tomporvaz.github.io/Exam-Scheduler-FE/\"}\n    onRedirectCallback={onRedirectCallback}\n  >\n  <Router history={history} basename=\"Exam-Scheduler-FE\">\n    <App />\n  </Router>\n  </Auth0Provider>, document.getElementById('root')\n  \n);\n\n\n/* \ndocument.addEventListener('DOMContentLoaded', function() {\n    var calendarEl = document.getElementById('calendar');\n  \n    var calendar = new Calendar(calendarEl, {\n      plugins: [ dayGridPlugin, timeGridPlugin, listViewPlugin ]\n    });\n  \n    calendar.render();\n  });\n */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}